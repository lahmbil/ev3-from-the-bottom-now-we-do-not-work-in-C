
/**
 * @file wheels.h
 * @author Leander Feppon and Bilal Lahmami
 * @date 10 Dec 2018
 * @brief Manages the movements of the robot and its position
 *
 */

#ifndef SWAGBOY_WHEELS_H
#define SWAGBOY_WHEELS_H

#include <stdint-gcc.h>
#include <stdbool.h>
#include <sys/types.h>

#include "pathfinding.h"

#define DIST_PER_SEC 15.0f // cm

enum MotorPosition{ L, R };

/**
 * Enumeration for the rotation of the robot
 */
enum RotationPosition{

    MID_LEFT_TURN = 85, /**< 45° */
    MID_RIGHT_TURN = -MID_LEFT_TURN, /**< -45° */
    LEFT_TURN = 180, /**< 90° */
    RIGHT_TURN = -LEFT_TURN, /**< -90° */
    HALF_TURN = 380, /**< 180° */
    FULL_TURN = 760 /**< 360° */
};

/**
 * Enumaration for the state of the robot
 */
enum CommandState{

    STOPPED = 0,
    MOVE_FORWARD,
    MOVE_BACKWARD,
    ROTATING,
    AUTONAV
};

/**
 * A structure representating commands given to the robot
 */
typedef struct {

    int command; /**< {STOPPED, MOVE_FORWARD, MOVE_BACKWARD, ROTATING}*/
    float distance;
    int duration;
    int angle;

    bool hasChanged;/**< Useful for the move listener*/

} COMMAND;

/**
 * A strucutre used to know the position of the robot on the field
 */
typedef struct {

    float x;
    float y;
    int v; /**< Heading*/

    bool autonav;
    int speed;

    //pthread_t thread_id;

} POSE;

/**
 * A structure used as an abstraction for the wheels
 */
typedef struct {

    uint8_t motors[2];
    POSE *pose;
    COMMAND *cmd;

} WHEELS;


/**
 * @brief First function to call. Try to allocate enough memory to a WHEELS structure.
 * Sets speed to a third of the maximum. Creates a thread for the move listener, which is used to retain the position
 * of the robot on the field.
 * @param left_motor_port A number to the left wheel's motor
 * @param right_motor_port A number to the right wheel's motor
 * @return A pointer to a WHEELS structure
 * @see http://in4lio.github.io/ev3dev-c/group__ev3__port.html
 */
WHEELS* init_motors( uint8_t left_motor_port, uint8_t right_motor_port );

/**
 * @brief Frees the memory taken by w and stop the thread created for the move listener
 * @param w
 */
void uninit_motors(WHEELS** w);

/**
 * @brief Sets both motors' speed to a percentage of their maximum
 * @param w
 * @param speed Must be a number between 0 and 1
 */
void set_speed( WHEELS* w, float speed );

/**
 * @brief Indicates if the wheels are currently moving
 * @param w
 * @return A boolean: true if the motors are still running or stalled
 */
bool is_moving( WHEELS* w );

/**
 * @brief Makes the robot move in a straight line until another command is given
 * @param w
 */
void run_forever( WHEELS* w );

/**
 * @brief Makes the robot move in a straight line for ms milliseconds
 * @param w
 * @param ms A duration in milliseconds
 */
void run_timed( WHEELS* w, int ms );

/**
 * @brief Moves the robot until it reaches the distance given. Only works if the robot's speed is set to 30%
 * @param w
 * @param distance In centimeters
 */
void travel( WHEELS* w, float distance );

/**
 * @brief Rotates the robot. Result is not assured for angles which are not 45, 90, 180, 360
 * @param w
 * @param angle In degrees. Can be less than 0
 */
void rotate( WHEELS* w, int angle );

/**
 * @brief Rotates the robot until it reaches the angle given in parameter. Does not make a full turn
 * @param w
 * @param angle In degrees. Can be less than 0
 */
void rotate_to( WHEELS* w, int angle );

/**
 * @brief Stops the motion of the robot
 * @param w
 */
void stop_wheels( WHEELS* w );

/**
 * @brief Returns the maximum speed handled by the wheels' motors
 * @param w
 * @return An integer: rotation max for one second
 */
int get_max_speed( WHEELS* w );

/**
 * @brief Follows the path generated by calculate_path_to
 * @param w
 * @param pf A structure to a PATHFINDER structure previously created
 */
void follow_path( WHEELS* w, PATHFINDER* pf );

/**
 * @brief Makes the robot follow a path generated by pathfinder to avoid obstacles
 * @param w
 * @param pf
 * @param x x coordinate of destination
 * @param y y coordinate of destination
 * @link pathfinder.h
 */
void go_to( WHEELS* w, PATHFINDER* pf, float x, float y );

/**
 * @brief Finds the nearest puck from current position
 * @param w
 * @return index to the nearest puck in pucks
 * @see pathfinding.h
 */
int nearest_puck( WHEELS* w );

#endif //SWAGBOY_WHEELS_H
